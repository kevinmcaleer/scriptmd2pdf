name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with pytest
        run: |
          pytest test_screenmd2pdf.py -v --cov=screenmd2pdf --cov-report=xml --cov-report=term

      - name: Check code coverage
        run: |
          coverage report --fail-under=80

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Check code formatting with black
        run: black --check screenmd2pdf.py app.py test_screenmd2pdf.py

      - name: Check import sorting with isort
        run: isort --check-only screenmd2pdf.py app.py test_screenmd2pdf.py

      - name: Lint with flake8
        run: flake8 screenmd2pdf.py app.py test_screenmd2pdf.py --max-line-length=120 --ignore=E203,W503

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tags=192.168.2.1:5000/md2script:$VERSION,192.168.2.1:5000/md2script:latest" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "tags=192.168.2.1:5000/md2script:latest" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image for multiple platforms
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Load and test image
        run: |
          docker load --input /tmp/image.tar
          docker run --rm -d --name test-container -p 8000:8000 192.168.2.1:5000/md2script:latest
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-container

      - name: Push to private registry
        if: success()
        run: |
          # Configure insecure registry for private registry
          echo '{"insecure-registries": ["192.168.2.1:5000"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          sleep 5

          # Push image
          docker load --input /tmp/image.tar
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            docker push "$tag"
          done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            - Docker image available at: `192.168.2.1:5000/md2script:${{ github.ref_name }}`
            - Multi-platform support: linux/amd64, linux/arm64, linux/arm/v7

            ## Installation
            ```bash
            docker pull 192.168.2.1:5000/md2script:${{ github.ref_name }}
            docker-compose up -d
            ```

            See [deployment documentation](design/deployment.md) for details.
          draft: false
          prerelease: false
